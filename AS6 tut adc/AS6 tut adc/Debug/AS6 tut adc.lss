
AS6 tut adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000da  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000014c  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000bc  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000131  00000000  00000000  00000b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fe  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8adc_inithh>:
//#include <avr/io.h>
#include "adc_lib.h"

void adc_init(uint8_t ADC_PRESCALER, uint8_t ADC_REF ){
	// Clear ADCSRA, set ADEN and the ADC_PRESCALER
	ADCSRA = (1 << ADEN) | ADC_PRESCALER;
  80:	80 68       	ori	r24, 0x80	; 128
  82:	80 93 7a 00 	sts	0x007A, r24
	// Clear ADMUX and set ADC_REF
	ADMUX = (ADC_REF << 6);
  86:	62 95       	swap	r22
  88:	66 0f       	add	r22, r22
  8a:	66 0f       	add	r22, r22
  8c:	60 7c       	andi	r22, 0xC0	; 192
  8e:	60 93 7c 00 	sts	0x007C, r22
  92:	08 95       	ret

00000094 <_Z8adc_8bith>:
}

uint8_t adc_8bit(uint8_t apin){
	ADMUX |= (1 << ADLAR); // 8bit
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	90 62       	ori	r25, 0x20	; 32
  9c:	90 83       	st	Z, r25
	ADMUX &= 0xF0; // clear what pin used.
  9e:	90 81       	ld	r25, Z
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	90 83       	st	Z, r25
	ADMUX |= apin; // set pin used.
  a4:	90 81       	ld	r25, Z
  a6:	89 2b       	or	r24, r25
  a8:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  b4:	80 81       	ld	r24, Z
  b6:	86 fd       	sbrc	r24, 6
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <_Z8adc_8bith+0x20>
	return ADCH;
  ba:	80 91 79 00 	lds	r24, 0x0079
}
  be:	08 95       	ret

000000c0 <main>:
#include <avr/io.h>
#include "adc_lib.c"

int main(void)
{
	adc_init(ADC_PRESCALER_64,ADC_REF_AVcc);
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	0e 94 40 00 	call	0x80	; 0x80 <_Z8adc_inithh>
	DDRD = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a b9       	out	0x0a, r24	; 10
 	while(1)
	 {
 		PORTD = adc_8bit(0);
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 4a 00 	call	0x94	; 0x94 <_Z8adc_8bith>
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	fb cf       	rjmp	.-10     	; 0xcc <main+0xc>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
