
LED_bar_8_cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000136  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001c2  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000014f  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001c6  00000000  00000000  00000c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000137  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000028  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z7led_bari>:
		if(number == 0) UD = 1;
    }
}//######################################## End main

void led_bar(int level){
	PORTD = 0;
  90:	1b b8       	out	0x0b, r1	; 11
	while(level){
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	41 f0       	breq	.+16     	; 0xa6 <_Z7led_bari+0x16>
		PORTD = (PORTD << 1);
  96:	2b b1       	in	r18, 0x0b	; 11
  98:	22 0f       	add	r18, r18
  9a:	2b b9       	out	0x0b, r18	; 11
		PORTD++;
  9c:	2b b1       	in	r18, 0x0b	; 11
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	2b b9       	out	0x0b, r18	; 11
		level--;
  a2:	01 97       	sbiw	r24, 0x01	; 1
    }
}//######################################## End main

void led_bar(int level){
	PORTD = 0;
	while(level){
  a4:	c1 f7       	brne	.-16     	; 0x96 <_Z7led_bari+0x6>
  a6:	08 95       	ret

000000a8 <main>:

int number,UD;
const int delaytime = 500;
int main(void){
//######################################## Setup	
	DDRD = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	UD = 1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	90 93 01 01 	sts	0x0101, r25
  b4:	80 93 00 01 	sts	0x0100, r24
		}
		else{
			number--;
		}
		if(number == 8) UD = 0;
		if(number == 0) UD = 1;
  b8:	c1 e0       	ldi	r28, 0x01	; 1
  ba:	d0 e0       	ldi	r29, 0x00	; 0
	UD = 1;
//######################################## Loop 
    while(1){
// 		led_pin(number);
// 		_delay_ms(delaytime);
		led_bar(number);
  bc:	80 91 02 01 	lds	r24, 0x0102
  c0:	90 91 03 01 	lds	r25, 0x0103
  c4:	0e 94 48 00 	call	0x90	; 0x90 <_Z7led_bari>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x26>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x30>
  d8:	00 00       	nop
		_delay_ms(delaytime);
		if(UD){
  da:	80 91 00 01 	lds	r24, 0x0100
  de:	90 91 01 01 	lds	r25, 0x0101
  e2:	89 2b       	or	r24, r25
  e4:	51 f0       	breq	.+20     	; 0xfa <main+0x52>
			number++;
  e6:	80 91 02 01 	lds	r24, 0x0102
  ea:	90 91 03 01 	lds	r25, 0x0103
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 03 01 	sts	0x0103, r25
  f4:	80 93 02 01 	sts	0x0102, r24
  f8:	09 c0       	rjmp	.+18     	; 0x10c <main+0x64>
		}
		else{
			number--;
  fa:	80 91 02 01 	lds	r24, 0x0102
  fe:	90 91 03 01 	lds	r25, 0x0103
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	90 93 03 01 	sts	0x0103, r25
 108:	80 93 02 01 	sts	0x0102, r24
		}
		if(number == 8) UD = 0;
 10c:	80 91 02 01 	lds	r24, 0x0102
 110:	90 91 03 01 	lds	r25, 0x0103
 114:	88 30       	cpi	r24, 0x08	; 8
 116:	91 05       	cpc	r25, r1
 118:	29 f4       	brne	.+10     	; 0x124 <main+0x7c>
 11a:	10 92 01 01 	sts	0x0101, r1
 11e:	10 92 00 01 	sts	0x0100, r1
 122:	cc cf       	rjmp	.-104    	; 0xbc <main+0x14>
		if(number == 0) UD = 1;
 124:	89 2b       	or	r24, r25
 126:	51 f6       	brne	.-108    	; 0xbc <main+0x14>
 128:	d0 93 01 01 	sts	0x0101, r29
 12c:	c0 93 00 01 	sts	0x0100, r28
 130:	c5 cf       	rjmp	.-118    	; 0xbc <main+0x14>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
